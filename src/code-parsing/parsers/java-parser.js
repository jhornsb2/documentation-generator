/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var javaParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[15,21,22,23],$V1=[1,34],$V2=[1,25],$V3=[1,26],$V4=[1,27],$V5=[1,28],$V6=[1,29],$V7=[1,30],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[9,18,26,28],$Vc=[2,29],$Vd=[18,28],$Ve=[1,67],$Vf=[1,68],$Vg=[1,92],$Vh=[1,70],$Vi=[1,71],$Vj=[1,72],$Vk=[1,79],$Vl=[1,81],$Vm=[1,82],$Vn=[1,83],$Vo=[1,85],$Vp=[1,87],$Vq=[1,88],$Vr=[1,90],$Vs=[1,93],$Vt=[1,94],$Vu=[1,95],$Vv=[1,96],$Vw=[1,97],$Vx=[20,57],$Vy=[1,100],$Vz=[1,106],$VA=[10,34],$VB=[1,111],$VC=[10,34,64,66,68],$VD=[1,117],$VE=[1,118],$VF=[10,34,64,66,68,71,76],$VG=[10,34,64,66,68,71,76,79],$VH=[2,68],$VI=[10,34,64,66],$VJ=[10,34,64,66,68,71];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"CodeFile":3,"PackageDeclaration":4,"ImportDeclarations":5,"TypeDeclaration":6,"ENDOFFILE":7,"PACKAGE":8,"IDENTIFIER":9,"SEMICOLON":10,"ImportDeclaration":11,"IMPORT":12,"ClassDeclaration":13,"Visibility":14,"CLASS":15,"Extension":16,"Implementations":17,"LBRACE":18,"ClassBody":19,"RBRACE":20,"PRIVATE":21,"PROTECTED":22,"PUBLIC":23,"EXTENDS":24,"Type":25,"IMPLEMENTS":26,"Implementation":27,"COMMA":28,"ClassBodyDeclaration":29,"FieldDeclaration":30,"MethodDeclaration":31,"LPAREN":32,"ParameterList":33,"RPAREN":34,"MethodBody":35,"BOOLEAN":36,"BYTE":37,"CHAR":38,"DOUBLE":39,"FLOAT":40,"INT":41,"LONG":42,"SHORT":43,"VOID":44,"Parameter":45,"BlockStatement":46,"LocalVariableDeclarationStatement":47,"Statement":48,"ASSIGN":49,"Expression":50,"Block":51,"ExpressionStatement":52,"IfStatement":53,"WhileStatement":54,"ReturnStatement":55,"IF":56,"ELSE":57,"WHILE":58,"RETURN":59,"AssignmentExpression":60,"ConditionalExpression":61,"LogicalOrExpression":62,"LogicalAndExpression":63,"OR":64,"EqualityExpression":65,"AND":66,"RelationalExpression":67,"EQUALS":68,"NOT_EQUALS":69,"AdditiveExpression":70,"LESS":71,"GREATER":72,"LESS_EQUAL":73,"GREATER_EQUAL":74,"MultiplicativeExpression":75,"PLUS":76,"MINUS":77,"UnaryExpression":78,"TIMES":79,"DIVIDE":80,"MOD":81,"PrimaryExpression":82,"NOT":83,"LITERAL":84,"INTEGER_LITERAL":85,"FLOAT_LITERAL":86,"DOUBLE_LITERAL":87,"STRING_LITERAL":88,"NULL":89,"$accept":0,"$end":1},
terminals_: {2:"error",7:"ENDOFFILE",8:"PACKAGE",9:"IDENTIFIER",10:"SEMICOLON",12:"IMPORT",15:"CLASS",18:"LBRACE",20:"RBRACE",21:"PRIVATE",22:"PROTECTED",23:"PUBLIC",24:"EXTENDS",26:"IMPLEMENTS",28:"COMMA",32:"LPAREN",34:"RPAREN",36:"BOOLEAN",37:"BYTE",38:"CHAR",39:"DOUBLE",40:"FLOAT",41:"INT",42:"LONG",43:"SHORT",44:"VOID",49:"ASSIGN",56:"IF",57:"ELSE",58:"WHILE",59:"RETURN",64:"OR",66:"AND",68:"EQUALS",69:"NOT_EQUALS",71:"LESS",72:"GREATER",73:"LESS_EQUAL",74:"GREATER_EQUAL",76:"PLUS",77:"MINUS",79:"TIMES",80:"DIVIDE",81:"MOD",83:"NOT",85:"INTEGER_LITERAL",86:"FLOAT_LITERAL",87:"DOUBLE_LITERAL",88:"STRING_LITERAL",89:"NULL"},
productions_: [0,[3,4],[4,3],[5,1],[11,3],[6,1],[13,8],[14,0],[14,1],[14,1],[14,1],[16,2],[17,2],[27,1],[27,3],[19,1],[29,1],[29,1],[30,3],[31,6],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[33,3],[33,0],[45,2],[35,3],[46,1],[46,1],[47,5],[48,1],[48,1],[48,1],[48,1],[48,1],[51,3],[52,2],[53,5],[53,7],[54,5],[55,3],[50,1],[60,3],[60,1],[61,1],[62,3],[63,3],[65,2],[65,2],[67,2],[67,1],[67,1],[67,2],[70,2],[70,2],[75,2],[75,1],[75,2],[78,1],[78,2],[78,2],[82,1],[82,1],[82,3],[84,1],[84,1],[84,1],[84,1],[84,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,8:[1,3]},{1:[3]},{5:4,11:5,12:[1,6]},{9:[1,7]},{6:8,13:9,14:10,15:[2,7],21:[1,11],22:[1,12],23:[1,13]},o($V0,[2,3]),{9:[1,14]},{10:[1,15]},{7:[1,16]},{7:[2,5]},{15:[1,17]},{15:[2,8]},{15:[2,9]},{15:[2,10]},{10:[1,18]},{12:[2,2]},{1:[2,1]},{9:[1,19]},o($V0,[2,4]),{16:20,24:[1,21]},{17:22,26:[1,23]},{9:$V1,25:24,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va},{18:[1,35]},{9:$V1,25:37,27:36,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va},{26:[2,11]},o($Vb,[2,20]),o($Vb,[2,21]),o($Vb,[2,22]),o($Vb,[2,23]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),o($Vb,[2,27]),o($Vb,[2,28]),o($Vb,$Vc),{9:$V1,19:38,25:42,29:39,30:40,31:41,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va},{18:[2,12],28:[1,43]},o($Vd,[2,13]),{20:[1,44]},{20:[2,15]},{20:[2,16]},{20:[2,17]},{9:[1,45]},{9:$V1,25:46,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va},{7:[2,6]},{10:[1,47],32:[1,48]},o($Vd,[2,14]),{20:[2,18]},{9:$V1,25:51,33:49,34:[2,31],36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va,45:50},{34:[1,52]},{28:[1,53]},{9:[1,54]},{18:[1,56],35:55},{9:$V1,25:51,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va,45:57},o([28,34],[2,32]),{20:[2,19]},{9:$Ve,18:$Vf,25:61,32:$Vg,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:58,47:59,48:60,50:69,51:62,52:63,53:64,54:65,55:66,56:$Vh,58:$Vi,59:$Vj,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{34:[2,30]},{20:[1,98]},{20:[2,34]},{20:[2,35]},{9:[1,99]},o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,39]),o($Vx,[2,40]),o($Vx,[2,41]),o([9,79],$Vc,{49:$Vy}),{9:$Ve,18:$Vf,25:61,32:$Vg,36:$V2,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:$V8,43:$V9,44:$Va,46:101,47:59,48:60,50:69,51:62,52:63,53:64,54:65,55:66,56:$Vh,58:$Vi,59:$Vj,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{10:[1,102]},{32:[1,103]},{32:[1,104]},{9:$Vz,32:$Vg,50:105,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($VA,[2,48]),o($VA,[2,50]),o($VA,[2,51]),{64:[1,107]},{66:[1,108]},{68:[1,109]},{9:$VB,32:$Vg,67:110,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{71:[1,112]},o($VC,[2,57]),o($VC,[2,58]),{9:$VB,32:$Vg,70:113,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{76:[1,114]},{9:$VB,32:$Vg,75:115,77:$VD,78:116,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{79:$VE},o($VF,[2,63]),{9:$VB,32:$Vg,77:$VD,78:119,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($VG,[2,65]),{9:$VB,32:$Vg,77:$VD,78:120,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($VG,[2,69]),{9:$Vz,32:$Vg,50:121,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($VG,[2,71]),o($VG,[2,72]),o($VG,[2,73]),o($VG,[2,74]),o($VG,[2,75]),{20:[2,33]},{49:[1,122]},{9:$Vz,32:$Vg,50:123,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{20:[1,124]},o($Vx,[2,43]),{9:$Vz,32:$Vg,50:125,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{9:$Vz,32:$Vg,50:126,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{10:[1,127]},{49:$Vy,79:$VH},{9:$VB,32:$Vg,63:128,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{9:$VB,32:$Vg,65:129,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($VI,[2,54]),o($VI,[2,55]),o($VG,$VH),o($VC,[2,56]),o($VC,[2,59]),o($VJ,[2,60]),o($VJ,[2,61]),{79:$VE},{9:$VB,32:$Vg,77:$VD,78:130,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($VF,[2,62]),o($VF,[2,64]),o($VG,[2,66]),{34:[1,131]},{9:$Vz,32:$Vg,50:132,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($VA,[2,49]),o($Vx,[2,42]),{34:[1,133]},{34:[1,134]},o($Vx,[2,47]),o($VA,[2,52]),o([10,34,64],[2,53]),o($VG,[2,67]),o($VG,[2,70]),{10:[1,135]},{9:$Vz,18:$Vf,32:$Vg,48:136,50:69,51:62,52:63,53:64,54:65,55:66,56:$Vh,58:$Vi,59:$Vj,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{9:$Vz,18:$Vf,32:$Vg,48:137,50:69,51:62,52:63,53:64,54:65,55:66,56:$Vh,58:$Vi,59:$Vj,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},{20:[2,36]},{20:[2,44],57:[1,138]},o($Vx,[2,46]),{9:$Vz,18:$Vf,32:$Vg,48:139,50:69,51:62,52:63,53:64,54:65,55:66,56:$Vh,58:$Vi,59:$Vj,60:73,61:74,62:75,63:76,65:77,67:78,69:$Vk,70:80,72:$Vl,73:$Vm,74:$Vn,75:84,77:$Vo,78:86,80:$Vp,81:$Vq,82:89,83:$Vr,84:91,85:$Vs,86:$Vt,87:$Vu,88:$Vv,89:$Vw},o($Vx,[2,45])],
defaultActions: {9:[2,5],11:[2,8],12:[2,9],13:[2,10],15:[2,2],16:[2,1],24:[2,11],39:[2,15],40:[2,16],41:[2,17],44:[2,6],47:[2,18],55:[2,19],57:[2,30],59:[2,34],60:[2,35],98:[2,33],135:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    // TODO: Define the tokens that will be used in the grammar
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace */
break;
case 1:/* ignore single-line comment */
break;
case 2:/* ignore multi-line comment */
break;
case 3:return 'DOCCOMMENT';
break;
case 4:return 85;
break;
case 5:return 86;
break;
case 6:return 87;
break;
case 7:return 88;
break;
case 8:return 89;
break;
case 9:return 36;
break;
case 10:return 37;
break;
case 11:return 38;
break;
case 12:return 39;
break;
case 13:return 40;
break;
case 14:return 41;
break;
case 15:return 42;
break;
case 16:return 43;
break;
case 17:return 44;
break;
case 18:return 15;
break;
case 19:return 'ENUM';
break;
case 20:return 'INTERFACE';
break;
case 21:return 24;
break;
case 22:return 26;
break;
case 23:return 8;
break;
case 24:return 21;
break;
case 25:return 22;
break;
case 26:return 23;
break;
case 27:return 'BREAK';
break;
case 28:return 'CASE';
break;
case 29:return 'CONTINUE';
break;
case 30:return 57;
break;
case 31:return 'GOTO';
break;
case 32:return 56;
break;
case 33:return 'SWITCH';
break;
case 34:return 'ASSERT';
break;
case 35:return 'CATCH';
break;
case 36:return 'FINALLY';
break;
case 37:return 'TRY';
break;
case 38:return 'THROW';
break;
case 39:return 'DO';
break;
case 40:return 'FOR';
break;
case 41:return 58;
break;
case 42:return 'ABSTRACT';
break;
case 43:return 'CONST';
break;
case 44:return 'FINAL';
break;
case 45:return 'NATIVE';
break;
case 46:return 'STATIC';
break;
case 47:return 'STRICTFP';
break;
case 48:return 'THROWS';
break;
case 49:return 'TRANSIENT';
break;
case 50:return 'SUPER';
break;
case 51:return 'THIS';
break;
case 52:return 'DEFAULT';
break;
case 53:return 12;
break;
case 54:return 'INSTANCEOF';
break;
case 55:return 'NEW';
break;
case 56:return 59;
break;
case 57:return 'SYNCHRONIZED';
break;
case 58:return 'VOLATILE';
break;
case 59:return 9;
break;
case 60:return 32;
break;
case 61:return 34;
break;
case 62:return 18;
break;
case 63:return 20;
break;
case 64:return 'LBRACKET';
break;
case 65:return 'RBRACKET';
break;
case 66:return 68;
break;
case 67:return 69;
break;
case 68:return 49;
break;
case 69:return 76;
break;
case 70:return 77;
break;
case 71:return 79;
break;
case 72:return 80;
break;
case 73:return 81;
break;
case 74:return 66;
break;
case 75:return 64;
break;
case 76:return 83;
break;
case 77:return 71;
break;
case 78:return 72;
break;
case 79:return 73;
break;
case 80:return 74;
break;
case 81:return 10;
break;
case 82:return 28;
break;
case 83:return 'DOT';
break;
case 84:return 'BITWISE_AND';
break;
case 85:return 'BITWISE_OR';
break;
case 86:return 'BITWISE_XOR';
break;
case 87:return 'BITWISE_NOT';
break;
case 88:return 'LEFT_SHIFT';
break;
case 89:return 'RIGHT_SHIFT';
break;
case 90:return 'UNSIGNED_RIGHT_SHIFT';
break;
case 91:return 7;
break;
}
},
rules: [/^(?:(\s+))/,/^(?:\/\/.*)/,/^(?:\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/)/,/^(?:\/\*\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/)/,/^(?:([0-9])+)/,/^(?:([0-9])+(\.([0-9])+)?([eE][+-]?([0-9])+)?[fF])/,/^(?:([0-9])+(\.([0-9])+)?([eE][+-]?([0-9])+)?[dD]?)/,/^(?:"([^\"\\]|\\.)*")/,/^(?:null\b)/,/^(?:boolean\b)/,/^(?:byte\b)/,/^(?:char\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:void\b)/,/^(?:class\b)/,/^(?:enum\b)/,/^(?:interface\b)/,/^(?:extends\b)/,/^(?:implements\b)/,/^(?:package\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:public\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:continue\b)/,/^(?:else\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:switch\b)/,/^(?:assert\b)/,/^(?:catch\b)/,/^(?:finally\b)/,/^(?:try\b)/,/^(?:throw\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:abstract\b)/,/^(?:const\b)/,/^(?:final\b)/,/^(?:native\b)/,/^(?:static\b)/,/^(?:strictfp\b)/,/^(?:throws\b)/,/^(?:transient\b)/,/^(?:super\b)/,/^(?:this\b)/,/^(?:default\b)/,/^(?:import\b)/,/^(?:instanceof\b)/,/^(?:new\b)/,/^(?:return\b)/,/^(?:synchronized\b)/,/^(?:volatile\b)/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:~)/,/^(?:<<)/,/^(?:>>)/,/^(?:>>>)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = javaParser;
exports.Parser = javaParser.Parser;
exports.parse = function () { return javaParser.parse.apply(javaParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}